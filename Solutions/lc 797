class Solution {
public:
    vector<vector<int>>adj;
    vector<vector<int>>ans;
    bool check(int x, vector<int>path)
    {
        for(int i=0;i<path.size();i++)
        {
            if(path[i]==x)
                return 1;
        }
        return 0;
    }
    void bfs(int src, int dst, int n)
    {
        queue<vector<int>>q;
        vector<int>path;
        path.push_back(src);
        q.push(path);
        while(!q.empty())
        {
            path = q.front();
            q.pop();
            int last = path[path.size()-1];
            if(last==dst)
            {
                ans.push_back(path);
                //cout<<path.size()<<endl;
            }
            
                for(int i=0;i<adj[last].size();i++)
                {
                    if(!check(adj[last][i],path))
                    {
                        vector<int> newp(path);
                        newp.push_back(adj[last][i]);
                        q.push(newp);
                    }
                }
            
        }
    }
    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& g) {
        int n = g.size();
        adj.resize(n);
        for(int i=0;i<g.size();i++)
        {
            for(int j=0;j<g[i].size();j++)
            {
                adj[i].push_back(g[i][j]);
            }
        }
        bfs(0,n-1,n);
        return ans;
    }
};
